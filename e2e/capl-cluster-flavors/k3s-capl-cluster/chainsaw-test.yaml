# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  creationTimestamp: null
  name: k3s-capl-cluster
  # Labels to allow the test to be triggered based on selector flag
  labels:
    all:
    k3s:
    flavors:
spec:
  bindings:
    # A short identifier for the E2E test run
    - name: run
      value: (join('-', ['e2e', 'k3s-cluster', env('GIT_REF')]))
    - name: cluster
      # Format the cluster name
      value: (trim((truncate(($run), `32`)), '-'))
  template: true
  steps:
    - name: Check if CAPI provider resources exist
      try:
        - assert:
            file: assert-capi-resources.yaml
    - name: Generate cluster using clusterctl
      try:
        - script:
            env:
              - name: CLUSTER
                value: ($cluster)
              - name: NAMESPACE
                value: ($namespace)
              - name: CLUSTERCTL_CONFIG
                value: (env('CLUSTERCTL_CONFIG'))
            content: |
              set -e
              clusterctl generate cluster $CLUSTER -n $NAMESPACE \
              --flavor k3s --kubernetes-version v1.29.1+k3s2 \
              --infrastructure local-linode:v0.0.0 \
              --control-plane-machine-count 1 --worker-machine-count 1 \
              --config ${CLUSTERCTL_CONFIG:=${HOME}/.cluster-api/clusterctl.yaml} > k3s-cluster.yaml
            check:
              ($error == null): true
    - name: Apply generated cluster yaml
      try:
        - apply:
            file: k3s-cluster.yaml
        - assert:
            file: assert-child-cluster-resources.yaml
      catch:
        - describe:
            apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2
            kind: LinodeMachine
        - describe:
            apiVersion: cluster.x-k8s.io/v1beta1
            kind: Machine
        - describe:
            apiVersion: cluster.x-k8s.io/v1beta1
            kind: MachineDeployment
        - describe:
            apiVersion: controlplane.cluster.x-k8s.io/v1beta2
            kind: KThreesControlPlane
    - name: Check if the linodes are created
      try:
        - script:
            env:
              - name: TARGET_API
                value: api.linode.com
              - name: TARGET_API_VERSION
                value: v4beta
              - name: URI
                value: linode/instances
              - name: FILTER
                value: (to_string({"tags":($cluster)}))
            content: |
              set -e
              curl -s \
                -H "Authorization: Bearer $LINODE_TOKEN" \
                -H "X-Filter: $FILTER" \
                -H "Content-Type: application/json" \
                "https://$TARGET_API/$TARGET_API_VERSION/$URI"
            check:
              ($error): ~
              (json_parse($stdout)):
                results: 2
    - name: Get child cluster kubeconfig
      try:
        - script:
            env:
              - name: CLUSTER
                value: ($cluster)
              - name: NAMESPACE
                value: ($namespace)
              - name: CLUSTERCTL_CONFIG
                value: (env('CLUSTERCTL_CONFIG'))
            content: |
              set -e
              clusterctl get kubeconfig $CLUSTER -n $NAMESPACE > k3s-kubeconfig.yaml
            check:
              ($error == null): true
    - clusters:
        k3s:
          kubeconfig: ./k3s-kubeconfig.yaml
      name: Check child cluster resources
      try:
        - assert:
            cluster: k3s
            file: assert-child-cluster-deployments.yaml
        - assert:
            cluster: k3s
            file: assert-child-cluster-daemonsets.yaml
      catch:
        - describe:
            cluster: k3s
            apiVersion: apps/v1
            kind: Deployment
            namespace: kube-system
        - describe:
            cluster: k3s
            apiVersion: apps/v1
            kind: DaemonSet
            namespace: kube-system
    - name: Delete child cluster
      try:
        - delete:
            ref:
              apiVersion: cluster.x-k8s.io/v1beta1
              kind: Cluster
              name: ($cluster)
        - delete:
            ref:
              apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
              kind: LinodeVPC
              name: ($cluster)
        - error:
            file: check-child-cluster-and-vpc-deleted.yaml
    - name: Check if the linodes are deleted
      try:
        - script:
            env:
              - name: TARGET_API
                value: api.linode.com
              - name: TARGET_API_VERSION
                value: v4beta
              - name: URI
                value: linode/instances
              - name: FILTER
                value: (to_string({"tags":($cluster)}))
            content: |
              set -e
              curl -s \
                -H "Authorization: Bearer $LINODE_TOKEN" \
                -H "X-Filter: $FILTER" \
                -H "Content-Type: application/json" \
                "https://$TARGET_API/$TARGET_API_VERSION/$URI"
            check:
              ($error): ~
              (json_parse($stdout)):
                results: 0
    - name: Delete generated child cluster manifest yaml
      try:
        - script:
            content: |
              rm -f k3s-cluster.yaml
              rm -f k3s-kubeconfig.yaml
            check:
              ($error == null): true
