# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  creationTimestamp: null
  name: vpc-integration
spec:
  bindings:
    # A short identifier for the E2E test run
  - name: run
    value: (join('-', ['e2e', 'lm-vpc', env('GIT_REF')]))
  - name: cluster
    # Format the cluster name
    value: (trim((truncate(($run), `32`)), '-'))
  - name: vpc
    # Format the VPC name into a valid Kubernetes object name
    value: (trim((truncate(($run), `63`)), '-'))
  template: true
  steps:
  - name: step-00
    try:
    - assert:
        file: 00-assert.yaml
  - name: step-01
    try:
    - apply:
        file: 01-create-cluster.yaml
    - assert:
        file: 01-assert.yaml
  - name: step-02
    try:
    - apply:
        file: 02-create-linodemachine.yaml
    - assert:
        file: 02-assert.yaml
  - name: step-03
    try:
    - script:
        env:
        - name: TARGET_API
          value: api.linode.com
        - name: TARGET_API_VERSION
          value: v4beta
        - name: URI
          value: linode/instances
        - name: FILTER
          value: (to_string({"tags":($cluster)}))
        content: |
          set -e
          curl -s \
            -H "Authorization: Bearer $LINODE_TOKEN" \
            -H "X-Filter: $FILTER" \
            -H "Content-Type: application/json" \
            "https://$TARGET_API/$TARGET_API_VERSION/$URI"
        check:
          ($error): ~
          (json_parse($stdout)):
            results: 1
    - script:
        env:
        - name: TARGET_API
          value: api.linode.com
        - name: TARGET_API_VERSION
          value: v4beta
        - name: URI
          value: vpcs
        - name: FILTER
          value: (to_string({"label":($vpc)}))
        content: |
          set -e
          curl -s \
            -H "Authorization: Bearer $LINODE_TOKEN" \
            -H "X-Filter: $FILTER" \
            -H "Content-Type: application/json" \
            "https://$TARGET_API/$TARGET_API_VERSION/$URI"
        check:
          ($error): ~
          (json_parse($stdout)):
            data:
            - subnets:
              - linodes:
                - interfaces:
                  - active: true
  - name: step-04
    try:
    - delete:
        ref:
          apiVersion: cluster.x-k8s.io/v1beta1
          kind: Cluster
          name: ($cluster)
    - delete:
        ref:
          apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
          kind: LinodeVPC
          name: ($vpc)
    - error:
        file: 04-error.yaml
  - name: step-05
    try:
    - script:
        env:
        - name: TARGET_API
          value: api.linode.com
        - name: TARGET_API_VERSION
          value: v4beta
        - name: URI
          value: linode/instances
        - name: FILTER
          value: (to_string({"tags":($cluster)}))
        content: |
          set -e
          curl -s \
            -H "Authorization: Bearer $LINODE_TOKEN" \
            -H "X-Filter: $FILTER" \
            -H "Content-Type: application/json" \
            "https://$TARGET_API/$TARGET_API_VERSION/$URI"
        check:
          ($error): ~
          (json_parse($stdout)):
            results: 0
    - script:
        env:
        - name: TARGET_API
          value: api.linode.com
        - name: TARGET_API_VERSION
          value: v4beta
        - name: URI
          value: vpcs
        - name: FILTER
          value: (to_string({"label":($vpc)}))
        content: |
          set -e
          curl -s \
            -H "Authorization: Bearer $LINODE_TOKEN" \
            -H "X-Filter: $FILTER" \
            -H "Content-Type: application/json" \
            "https://$TARGET_API/$TARGET_API_VERSION/$URI"
        check:
          ($error): ~
          (json_parse($stdout)):
            results: 0
  - name: step-06
    try:
    - apply:
        file: 06-cleanup-cluster.yaml
