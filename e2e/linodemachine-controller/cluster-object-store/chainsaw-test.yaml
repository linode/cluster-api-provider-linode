# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: cluster-object-store
  # Label to trigger the test on every PR
  labels:
    all:
    linodemachine:
spec:
  bindings:
    # A short identifier for the E2E test run
    - name: run
      value: (join('-', ['e2e', 'cluster-obj-store', random('[0-9a-z]{7}')]))
    - name: cluster
      # Format the cluster name
      value: (trim((truncate(($run), `29`)), '-'))
    - name: key
      # Format the key name into a valid Kubernetes object name
      # TODO: This is over-truncated to account for the Kubernetes access key Secret
      value: (trim((truncate((join('-', [($cluster), 'object-store'])), `52`)), '-'))
    - name: key_secret
      value: (concat(($key), '-obj-key'))
  template: true
  steps:
    - name: Check if CAPI provider resources exist
      try:
        - assert:
            file: assert-capi-resources.yaml
    - name: Create bucket
      try:
        - script:
            env:
              - name: URI
                value: object-storage/buckets
              - name: BUCKET_LABEL
                value: ($key)
            content: |
              set -e

              curl -s \
                -X POST \
                -H "Authorization: Bearer $LINODE_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{\"label\":\"$BUCKET_LABEL\",\"region\":\"us-sea\"}" \
                "https://api.linode.com/v4/$URI"
            check:
              ($error): ~
    - name: Create LinodeObjectStorageKey
      try:
        - apply:
            file: create-linodeobjectstoragekey.yaml
        - assert:
            file: assert-key-and-secret.yaml
      catch:
        - describe:
            apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2
            kind: LinodeObjectStorageKey
        - describe:
            apiVersion: v1
            kind: Secret
    - name: Create Cluster resource
      try:
        - apply:
            file: create-cluster.yaml
      catch:
        - describe:
            apiVersion: cluster.x-k8s.io/v1beta1
            kind: Cluster
    - name: Generate dummy cloud-config data
      try:
        - script:
            env:
              - name: NAMESPACE
                value: ($namespace)
            content: |
              set -e

              # Some very incompressible data
              tr -dc A-Za-z0-9 < /dev/urandom | head -c 100kB > chonk.txt
              kubectl -n $NAMESPACE create secret generic chonk-secret --from-file=chonk.txt
            check:
              ($error): ~
    - name: Create LinodeMachine resource
      try:
        - apply:
            file: create-linodemachine.yaml
        - assert:
            file: assert-linodemachine.yaml
      catch:
        - describe:
            apiVersion: infrastructure.cluster.x-k8s.io/v1alpha2
            kind: LinodeMachineTemplate
        - describe:
            apiVersion: controlplane.cluster.x-k8s.io/v1beta1
            kind: KubeadmControlPlane
    - name: Delete Cluster resource
      try:
        - delete:
            ref:
              apiVersion: cluster.x-k8s.io/v1beta1
              kind: Cluster
              name: ($cluster)
        - error:
            file: check-linodemachine-deletion.yaml
    - name: Delete LinodeObjectStorageKey
      try:
        - script:
            env:
              - name: URI
                value: object-storage/keys
              - name: OBJ_KEY
                value: ($key)
            content: |
              set -e

              export KEY_ID=$(kubectl -n $NAMESPACE get lobjkey $OBJ_KEY -ojson | jq '.status.accessKeyRef')

              curl -s \
                -X DELETE \
                -H "Authorization: Bearer $LINODE_TOKEN" \
                "https://api.linode.com/v4/$URI/$KEY_ID"
            check:
              ($error): ~
    - name: Delete bucket
      try:
        - script:
            env:
              - name: URI
                value: object-storage/buckets/us-sea
              - name: BUCKET_LABEL
                value: ($key)
            content: |
              set -e

              curl -s \
                -X DELETE \
                -H "Authorization: Bearer $LINODE_TOKEN" \
                "https://api.linode.com/v4/$URI/$BUCKET_LABEL"
            check:
              ($error): ~
