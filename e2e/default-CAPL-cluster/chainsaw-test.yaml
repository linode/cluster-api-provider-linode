# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  creationTimestamp: null
  name: default-capl-cluster
  # Labels to allow the test to be triggered based on selector flag
  labels:
    default-cluster:
    flavors:
spec:
  bindings:
    # A short identifier for the E2E test run
  - name: run
    value: (join('-', ['e2e', 'default-cluster', env('GIT_REF')]))
  - name: cluster
    # Format the cluster name
    value: (trim((truncate(($run), `32`)), '-'))
  template: true
  steps:
  - name: Check if CAPI provider resources exist
    try:
    - assert:
        file: assert-capi-resources.yaml
  - name: Generate cluster using clusterctl
    try:
    - script:
        env:
        - name: CLUSTER
          value: ($cluster)
        - name: NAMESPACE
          value: ($namespace)
        - name: FLAVOR
          value: (env('FLAVOR'))
        content: |
          set -e
          clusterctl generate cluster $CLUSTER -n $NAMESPACE $FLAVOR --kubernetes-version v1.29.1 --infrastructure linode:v0.0.0 --control-plane-machine-count 1 --worker-machine-count 1 > default-cluster.yaml
        check:
          ($error == null): true
  - name: Apply cluster file
    try:
    - apply:
        file: default-cluster.yaml
    - assert:
        file: assert-child-cluster-resources.yaml
  - name: step-02 - Check if the linodes are created
    try:
    - script:
        env:
        - name: TARGET_API
          value: api.linode.com
        - name: TARGET_API_VERSION
          value: v4beta
        - name: URI
          value: linode/instances
        - name: FILTER
          value: (to_string({"tags":($cluster)}))
        content: |
          set -e
          curl -s \
            -H "Authorization: Bearer $LINODE_TOKEN" \
            -H "X-Filter: $FILTER" \
            -H "Content-Type: application/json" \
            "https://$TARGET_API/$TARGET_API_VERSION/$URI"
        check:
          ($error): ~
          (json_parse($stdout)):
            results: 2
  - name: step-03 - delete cluster
    try:
    - delete:
        ref:
          apiVersion: cluster.x-k8s.io/v1beta1
          kind: Cluster
          name: ($cluster)
    - error:
        file: check-child-cluster-deleted.yaml
  - name: step-04 - Check if the linodes are deleted
    try:
    - script:
        env:
        - name: TARGET_API
          value: api.linode.com
        - name: TARGET_API_VERSION
          value: v4beta
        - name: URI
          value: linode/instances
        - name: FILTER
          value: (to_string({"tags":($cluster)}))
        content: |
          set -e
          curl -s \
            -H "Authorization: Bearer $LINODE_TOKEN" \
            -H "X-Filter: $FILTER" \
            -H "Content-Type: application/json" \
            "https://$TARGET_API/$TARGET_API_VERSION/$URI"
        check:
          ($error): ~
          (json_parse($stdout)):
            results: 0
  - name: step-05 - delete cluster file
    try:
    - script:
        content: |
          rm -f e2e-auto-gen*.yaml
        check:
          ($error == null): true
