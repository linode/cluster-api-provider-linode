---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
    name: ($cluster)
spec:
    kubeadmConfigSpec:
        clusterConfiguration:
            apiServer:
                extraArgs:
                    cloud-provider: external
            controllerManager:
                extraArgs:
                    cloud-provider: external
    machineTemplate:
        infrastructureRef:
            apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
            kind: LinodeMachineTemplate
            name: ($cluster)
    replicas: 3
    version: 1.29.1
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
kind: LinodeMachineTemplate
metadata:
    name: ($cluster)
spec:
    template:
        spec:
            region: us-sea
            type: g5-nanode-1
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: (join('-', [($cluster), 'md']))
spec:
  clusterName: ($cluster)
  replicas: 3
  selector:
    matchLabels: null
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: (join('-', [($cluster), 'md']))
      clusterName: test-cluster
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
        kind: LinodeMachineTemplate
        name: ($cluster)
      version: v1.29.1
---
apiVersion: v1
kind: Secret
metadata:
  name: common-init-files
stringData:
  containerd-config.toml: |
    version = 2
    imports = ["/etc/containerd/conf.d/*.toml"]
    [plugins]
      [plugins."io.containerd.grpc.v1.cri"]
        sandbox_image = "registry.k8s.io/pause:3.9"
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
        runtime_type = "io.containerd.runc.v2"
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
        SystemdCgroup = true
  k8s-modules.conf: |
    overlay
    br_netfilter
  kubeadm-pre-init.sh: |
    #!/bin/bash
    set -euo pipefail
    export DEBIAN_FRONTEND=noninteractive
    hostnamectl set-hostname "$1" && hostname -F /etc/hostname
    mkdir -p -m 755 /etc/apt/keyrings
    PATCH_VERSION=${2#[v]}
    VERSION=${PATCH_VERSION%.*}
    curl -fsSL "https://pkgs.k8s.io/core:/stable:/v$VERSION/deb/Release.key" | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v$VERSION/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    apt-get update -y
    apt-get install -y kubelet=$PATCH_VERSION* kubeadm=$PATCH_VERSION* kubectl=$PATCH_VERSION* containerd
    apt-mark hold kubelet kubeadm kubectl containerd
    modprobe overlay
    modprobe br_netfilter
    sysctl --system
    sed -i '/swap/d' /etc/fstab
    swapoff -a
  sysctl-k8s.conf: |
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    net.ipv4.ip_forward                 = 1
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: (join('-', [($cluster), 'md']))
spec:
  template:
    spec:
      files:
      - contentFrom:
          secret:
            key: containerd-config.toml
            name: common-init-files
        path: /etc/containerd/config.toml
      - contentFrom:
          secret:
            key: k8s-modules.conf
            name: common-init-files
        path: /etc/modules-load.d/k8s.conf
      - contentFrom:
          secret:
            key: sysctl-k8s.conf
            name: common-init-files
        path: /etc/sysctl.d/k8s.conf
      - contentFrom:
          secret:
            key: kubeadm-pre-init.sh
            name: common-init-files
        path: /kubeadm-pre-init.sh
        permissions: "0500"
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            cloud-provider: external
            provider-id: linode://{{ ds.meta_data.id }}
          name: '{{ ds.meta_data.label }}'
      preKubeadmCommands:
      - /kubeadm-pre-init.sh '{{ ds.meta_data.label }}' "v1.29.1"
