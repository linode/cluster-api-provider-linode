apiVersion: v1
kind: Secret
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move: "true"
  name: (join('-', [($cluster), 'credentials']))
  namespace: ($namespace)
stringData:
  apiToken: (env('LINODE_TOKEN'))
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move: "true"
  name: common-init-files
  namespace: ($namespace)
stringData:
  containerd-config.toml: |
    version = 2
    imports = ["/etc/containerd/conf.d/*.toml"]
    [plugins]
      [plugins."io.containerd.grpc.v1.cri"]
        sandbox_image = "registry.k8s.io/pause:3.9"
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
        runtime_type = "io.containerd.runc.v2"
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
        SystemdCgroup = true
  k8s-modules.conf: |
    overlay
    br_netfilter
  kubeadm-pre-init.sh: |
    #!/bin/bash
    set -euo pipefail
    export DEBIAN_FRONTEND=noninteractive
    hostnamectl set-hostname "$1" && hostname -F /etc/hostname
    mkdir -p -m 755 /etc/apt/keyrings
    PATCH_VERSION=${2#[v]}
    VERSION=${PATCH_VERSION%.*}
    curl -fsSL "https://pkgs.k8s.io/core:/stable:/v$VERSION/deb/Release.key" | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v$VERSION/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    apt-get update -y
    apt-get install -y kubelet=$PATCH_VERSION* kubeadm=$PATCH_VERSION* kubectl=$PATCH_VERSION* containerd
    apt-mark hold kubelet kubeadm kubectl containerd
    modprobe overlay
    modprobe br_netfilter
    sysctl --system
    sed -i '/swap/d' /etc/fstab
    swapoff -a
  sysctl-k8s.conf: |
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    net.ipv4.ip_forward                 = 1
---
apiVersion: v1
kind: Secret
metadata:
  name: (join('-', ['linode', ($cluster), 'crs-0']))
  namespace: ($namespace)
stringData:
  linode-token-region.yaml: |-
    kind: Secret
    apiVersion: v1
    metadata:
      name: linode-token-region
      namespace: kube-system
    stringData:
      apiToken: (env('LINODE_TOKEN'))
      region: us-ord
type: addons.cluster.x-k8s.io/resource-set
---
apiVersion: addons.cluster.x-k8s.io/v1alpha1
kind: HelmChartProxy
metadata:
  name: cilium
spec:
  chartName: cilium
  clusterSelector:
    matchLabels:
      cni: cilium
  namespace: kube-system
  options:
    timeout: 5m
    wait: true
    waitForJobs: true
  repoURL: https://helm.cilium.io/
  valuesTemplate: |
    ipam:
      mode: kubernetes
    k8s:
      requireIPv4PodCIDR: true
    hubble:
      relay:
        enabled: true
      ui:
        enabled: true
  version: 1.15.0
---
apiVersion: addons.cluster.x-k8s.io/v1alpha1
kind: HelmChartProxy
metadata:
  name: csi-driver-linode
spec:
  chartName: linode-blockstorage-csi-driver
  clusterSelector:
    matchLabels:
      csi: linode
  namespace: kube-system
  options:
    timeout: 5m
    wait: true
    waitForJobs: true
  repoURL: https://linode.github.io/linode-blockstorage-csi-driver/
  valuesTemplate: |
    secretRef:
      name: "linode-token-region"
      apiTokenRef: "apiToken"
  version: v0.6.3
---
apiVersion: addons.cluster.x-k8s.io/v1alpha1
kind: HelmChartProxy
metadata:
  name: linode-cloud-controller-manager
spec:
  chartName: ccm-linode
  clusterSelector:
    matchLabels:
      ccm: linode
  namespace: kube-system
  options:
    timeout: 5m
    wait: true
    waitForJobs: true
  repoURL: https://linode.github.io/linode-cloud-controller-manager/
  valuesTemplate: |
    secretRef:
      name: "linode-token-region"
    image:
      pullPolicy: IfNotPresent
  version: v0.3.24
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: (join('-', [($cluster), 'crs-0']))
spec:
  clusterSelector:
    matchLabels:
      crs: (join('-', [($cluster), 'crs']))
  resources:
  - kind: Secret
    name: (join('-', ['linode', ($cluster), 'crs-0']))
    namespace: ($namespace)
  strategy: ApplyOnce
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: (join('-', [($cluster), 'md-0']))
spec:
  template:
    spec:
      files:
      - contentFrom:
          secret:
            key: containerd-config.toml
            name: common-init-files
            namespace: ($namespace)
        path: /etc/containerd/config.toml
      - contentFrom:
          secret:
            key: k8s-modules.conf
            name: common-init-files
            namespace: ($namespace)
        path: /etc/modules-load.d/k8s.conf
      - contentFrom:
          secret:
            key: sysctl-k8s.conf
            name: common-init-files
            namespace: ($namespace)
        path: /etc/sysctl.d/k8s.conf
      - contentFrom:
          secret:
            key: kubeadm-pre-init.sh
            name: common-init-files
            namespace: ($namespace)
        path: /kubeadm-pre-init.sh
        permissions: "0500"
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            cloud-provider: external
            provider-id: linode://{{ ds.meta_data.id }}
          name: '{{ ds.meta_data.label }}'
      preKubeadmCommands:
      - /kubeadm-pre-init.sh '{{ ds.meta_data.label }}' "v1.29.1"
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    ccm: linode
    cluster: ($cluster)
    cni: cilium
    crs: (join('-', [($cluster), 'crs']))
    csi: linode
  name: ($cluster)
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 10.192.0.0/10
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: (join('-', [($cluster), 'control-plane']))
    namespace: ($namespace)
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
    kind: LinodeCluster
    name: ($cluster)
    namespace: ($namespace)
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: (join('-', [($cluster), 'md-0']))
spec:
  clusterName: ($cluster)
  replicas: 1
  selector:
    matchLabels: null
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: (join('-', [($cluster), 'md-0']))
          namespace: ($namespace)
      clusterName: ($cluster)
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
        kind: LinodeMachineTemplate
        name: (join('-', [($cluster), 'md-0']))
        namespace: ($namespace)
      version: v1.29.1
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: (join('-', [($cluster), 'control-plane']))
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: external
      controllerManager:
        extraArgs:
          cloud-provider: external
      etcd:
        local:
          dataDir: /var/lib/etcd_data/etcd
          extraArgs:
            quota-backend-bytes: "8589934592"
    diskSetup:
      filesystems:
      - device: /dev/sdc
        filesystem: ext4
        label: etcd_data
    files:
    - contentFrom:
        secret:
          key: containerd-config.toml
          name: common-init-files
          namespace: ($namespace)
      path: /etc/containerd/config.toml
    - contentFrom:
        secret:
          key: k8s-modules.conf
          name: common-init-files
          namespace: ($namespace)
      path: /etc/modules-load.d/k8s.conf
    - contentFrom:
        secret:
          key: sysctl-k8s.conf
          name: common-init-files
          namespace: ($namespace)
      path: /etc/sysctl.d/k8s.conf
    - contentFrom:
        secret:
          key: kubeadm-pre-init.sh
          name: common-init-files
          namespace: ($namespace)
      path: /kubeadm-pre-init.sh
      permissions: "0500"
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
          provider-id: linode://{{ ds.meta_data.id }}
        name: '{{ ds.meta_data.label }}'
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
          provider-id: linode://{{ ds.meta_data.id }}
        name: '{{ ds.meta_data.label }}'
    mounts:
    - - LABEL=etcd_data
      - /var/lib/etcd_data
    preKubeadmCommands:
    - /kubeadm-pre-init.sh '{{ ds.meta_data.label }}' "v1.29.1"
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
      kind: LinodeMachineTemplate
      name: (join('-', [($cluster), 'control-plane']))
      namespace: ($namespace)
  replicas: 1
  version: v1.29.1
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
kind: LinodeCluster
metadata:
  name: ($cluster)
spec:
  credentialsRef:
    name: (join('-', [($cluster), 'credentials']))
    namespace: ($namespace)
  region: us-ord
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
kind: LinodeMachineTemplate
metadata:
  name: (join('-', [($cluster), 'control-plane']))
spec:
  template:
    spec:
      authorizedKeys: null
      image: linode/ubuntu22.04
      region: us-ord
      type: g6-standard-2
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
kind: LinodeMachineTemplate
metadata:
  name: (join('-', [($cluster), 'md-0']))
spec:
  template:
    spec:
      authorizedKeys: null
      image: linode/ubuntu22.04
      region: us-ord
      type: g6-standard-2
