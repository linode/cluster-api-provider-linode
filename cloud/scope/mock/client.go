// Code generated by MockGen. DO NOT EDIT.
// Source: ./cloud/scope/client.go
//
// Generated by this command:
//
//	mockgen -source=./cloud/scope/client.go -destination ./cloud/scope/mock/client.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	types "k8s.io/apimachinery/pkg/types"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockcrClient is a mock of crClient interface.
type MockcrClient struct {
	ctrl     *gomock.Controller
	recorder *MockcrClientMockRecorder
}

// MockcrClientMockRecorder is the mock recorder for MockcrClient.
type MockcrClientMockRecorder struct {
	mock *MockcrClient
}

// NewMockcrClient creates a new mock instance.
func NewMockcrClient(ctrl *gomock.Controller) *MockcrClient {
	mock := &MockcrClient{ctrl: ctrl}
	mock.recorder = &MockcrClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcrClient) EXPECT() *MockcrClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockcrClient) Get(ctx context.Context, key types.NamespacedName, obj client.Object, opts ...client.GetOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockcrClientMockRecorder) Get(ctx, key, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockcrClient)(nil).Get), varargs...)
}
