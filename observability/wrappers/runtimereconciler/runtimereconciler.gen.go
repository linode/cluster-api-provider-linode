// Code generated by gowrap. DO NOT EDIT.
// template: ../../../hack/templates/opentelemetry.go.gotpl
// gowrap: http://github.com/hexdigest/gowrap

package runtimereconciler

//go:generate gowrap gen -p github.com/linode/cluster-api-provider-linode/observability/wrappers -i RuntimeReconciler -t ../../../hack/templates/opentelemetry.go.gotpl -o runtimereconciler.gen.go -l ""

import (
	"context"

	"github.com/linode/cluster-api-provider-linode/observability/tracing"
	_sourceWrappers "github.com/linode/cluster-api-provider-linode/observability/wrappers"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// RuntimeReconcilerWithTracing implements _sourceWrappers.RuntimeReconciler interface instrumented with opentracing spans
type RuntimeReconcilerWithTracing struct {
	_sourceWrappers.RuntimeReconciler
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewRuntimeReconcilerWithTracing returns RuntimeReconcilerWithTracing
func NewRuntimeReconcilerWithTracing(base _sourceWrappers.RuntimeReconciler, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) RuntimeReconcilerWithTracing {
	d := RuntimeReconcilerWithTracing{
		RuntimeReconciler: base,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// Reconcile implements _sourceWrappers.RuntimeReconciler
func (_d RuntimeReconcilerWithTracing) Reconcile(ctx context.Context, r1 reconcile.Request) (r2 reconcile.Result, err error) {
	ctx, _span := tracing.Start(ctx, "_sourceWrappers.RuntimeReconciler.Reconcile")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"r1":  r1}, map[string]interface{}{
				"r2":  r2,
				"err": err})
		}

		if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.RuntimeReconciler.Reconcile(ctx, r1)
}
