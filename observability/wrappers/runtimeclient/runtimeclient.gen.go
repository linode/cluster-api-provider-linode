// Code generated by gowrap. DO NOT EDIT.
// template: ../../../hack/templates/opentelemetry.go.gotpl
// gowrap: http://github.com/hexdigest/gowrap

package runtimeclient

//go:generate gowrap gen -p github.com/linode/cluster-api-provider-linode/observability/wrappers -i RuntimeClient -t ../../../hack/templates/opentelemetry.go.gotpl -o runtimeclient.gen.go -l ""

import (
	"context"

	"github.com/linode/cluster-api-provider-linode/observability/tracing"
	"github.com/linode/cluster-api-provider-linode/observability/wrappers"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// RuntimeClientWithTracing implements wrappers.RuntimeClient interface instrumented with opentracing spans
type RuntimeClientWithTracing struct {
	wrappers.RuntimeClient
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewRuntimeClientWithTracing returns RuntimeClientWithTracing
func NewRuntimeClientWithTracing(base wrappers.RuntimeClient, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) RuntimeClientWithTracing {
	d := RuntimeClientWithTracing{
		RuntimeClient: base,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// Create implements wrappers.RuntimeClient
func (_d RuntimeClientWithTracing) Create(ctx context.Context, obj client.Object, opts ...client.CreateOption) (err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.RuntimeClient.Create")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		}

		if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.RuntimeClient.Create(ctx, obj, opts...)
}

// Delete implements wrappers.RuntimeClient
func (_d RuntimeClientWithTracing) Delete(ctx context.Context, obj client.Object, opts ...client.DeleteOption) (err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.RuntimeClient.Delete")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		}

		if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.RuntimeClient.Delete(ctx, obj, opts...)
}

// DeleteAllOf implements wrappers.RuntimeClient
func (_d RuntimeClientWithTracing) DeleteAllOf(ctx context.Context, obj client.Object, opts ...client.DeleteAllOfOption) (err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.RuntimeClient.DeleteAllOf")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		}

		if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.RuntimeClient.DeleteAllOf(ctx, obj, opts...)
}

// Get implements wrappers.RuntimeClient
func (_d RuntimeClientWithTracing) Get(ctx context.Context, key client.ObjectKey, obj client.Object, opts ...client.GetOption) (err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.RuntimeClient.Get")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"key":  key,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		}

		if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.RuntimeClient.Get(ctx, key, obj, opts...)
}

// List implements wrappers.RuntimeClient
func (_d RuntimeClientWithTracing) List(ctx context.Context, list client.ObjectList, opts ...client.ListOption) (err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.RuntimeClient.List")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"list": list,
				"opts": opts}, map[string]interface{}{
				"err": err})
		}

		if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.RuntimeClient.List(ctx, list, opts...)
}

// Patch implements wrappers.RuntimeClient
func (_d RuntimeClientWithTracing) Patch(ctx context.Context, obj client.Object, patch client.Patch, opts ...client.PatchOption) (err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.RuntimeClient.Patch")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"obj":   obj,
				"patch": patch,
				"opts":  opts}, map[string]interface{}{
				"err": err})
		}

		if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.RuntimeClient.Patch(ctx, obj, patch, opts...)
}

// Update implements wrappers.RuntimeClient
func (_d RuntimeClientWithTracing) Update(ctx context.Context, obj client.Object, opts ...client.UpdateOption) (err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.RuntimeClient.Update")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		}

		if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.RuntimeClient.Update(ctx, obj, opts...)
}
