// Code generated by gowrap. DO NOT EDIT.
// template: ../../../hack/templates/opentelemetry.go.gotpl
// gowrap: http://github.com/hexdigest/gowrap

package reconciler

//go:generate gowrap gen -p github.com/linode/cluster-api-provider-linode/observability/wrappers -i Reconciler -t ../../../hack/templates/opentelemetry.go.gotpl -o reconciler.gen.go -l ""

import (
	"context"

	"github.com/linode/cluster-api-provider-linode/observability/tracing"
	"github.com/linode/cluster-api-provider-linode/observability/wrappers"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// ReconcilerWithTracing implements wrappers.Reconciler interface instrumented with opentracing spans
type ReconcilerWithTracing struct {
	wrappers.Reconciler
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewReconcilerWithTracing returns ReconcilerWithTracing
func NewReconcilerWithTracing(base wrappers.Reconciler, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) ReconcilerWithTracing {
	d := ReconcilerWithTracing{
		Reconciler: base,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// Create implements wrappers.Reconciler
func (_d ReconcilerWithTracing) Create(ctx context.Context, obj client.Object, opts ...client.CreateOption) (err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.Reconciler.Create")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Reconciler.Create(ctx, obj, opts...)
}

// Delete implements wrappers.Reconciler
func (_d ReconcilerWithTracing) Delete(ctx context.Context, obj client.Object, opts ...client.DeleteOption) (err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.Reconciler.Delete")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Reconciler.Delete(ctx, obj, opts...)
}

// DeleteAllOf implements wrappers.Reconciler
func (_d ReconcilerWithTracing) DeleteAllOf(ctx context.Context, obj client.Object, opts ...client.DeleteAllOfOption) (err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.Reconciler.DeleteAllOf")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Reconciler.DeleteAllOf(ctx, obj, opts...)
}

// Get implements wrappers.Reconciler
func (_d ReconcilerWithTracing) Get(ctx context.Context, key client.ObjectKey, obj client.Object, opts ...client.GetOption) (err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.Reconciler.Get")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"key":  key,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Reconciler.Get(ctx, key, obj, opts...)
}

// List implements wrappers.Reconciler
func (_d ReconcilerWithTracing) List(ctx context.Context, list client.ObjectList, opts ...client.ListOption) (err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.Reconciler.List")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"list": list,
				"opts": opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Reconciler.List(ctx, list, opts...)
}

// Patch implements wrappers.Reconciler
func (_d ReconcilerWithTracing) Patch(ctx context.Context, obj client.Object, patch client.Patch, opts ...client.PatchOption) (err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.Reconciler.Patch")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":   ctx,
				"obj":   obj,
				"patch": patch,
				"opts":  opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Reconciler.Patch(ctx, obj, patch, opts...)
}

// Reconcile implements wrappers.Reconciler
func (_d ReconcilerWithTracing) Reconcile(ctx context.Context, req ctrl.Request) (r1 ctrl.Result, err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.Reconciler.Reconcile")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"req": req}, map[string]interface{}{
				"r1":  r1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Reconciler.Reconcile(ctx, req)
}

// Update implements wrappers.Reconciler
func (_d ReconcilerWithTracing) Update(ctx context.Context, obj client.Object, opts ...client.UpdateOption) (err error) {
	ctx, _span := tracing.Start(ctx, "wrappers.Reconciler.Update")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"obj":  obj,
				"opts": opts}, map[string]interface{}{
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Reconciler.Update(ctx, obj, opts...)
}
