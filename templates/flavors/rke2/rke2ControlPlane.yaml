---
apiVersion: controlplane.cluster.x-k8s.io/v1alpha1
kind: RKE2ControlPlane
metadata:
  name: ${CLUSTER_NAME}-control-plane
spec:
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
    kind: LinodeMachineTemplate
    name: ${CLUSTER_NAME}-control-plane
  files:
    - path: /var/lib/rancher/rke2/server/manifests/ccm-linode.yaml
      content: |-
        apiVersion: helm.cattle.io/v1
        kind: HelmChart
        metadata:
          namespace: kube-system
          name: ccm-linode
        spec:
          targetNamespace: kube-system
          version: ${LINODE_CCM_VERSION:=v0.4.4}
          chart: ccm-linode
          repo: https://linode.github.io/linode-cloud-controller-manager/
          bootstrap: true
          valuesContent: |-
            routeController:
              vpcName: ${VPC_NAME:=${CLUSTER_NAME}}
              clusterCIDR: 10.0.0.0/8
              configureCloudRoutes: true
            secretRef:
              name: "linode-token-region"
            nodeSelector:
              node-role.kubernetes.io/control-plane: "true"
    - path: /var/lib/rancher/rke2/server/manifests/cilium-policy.yaml
      content: |
        apiVersion: "cilium.io/v2"
        kind: CiliumClusterwideNetworkPolicy
        metadata:
          name: "cluster-traffic"
        spec:
          description: "allow cluster traffic"
          nodeSelector: {}
          ingress:
            - fromEntities:
              - cluster
            - fromCIDR:
              - 10.0.0.0/8
            - fromEntities:
              - world
              toPorts:
                - ports:
                  - port: "22"
                  - port: "9345"
                  - port: "6443"
    - path: /var/lib/rancher/rke2/server/manifests/rke2-cilium-config.yaml
      owner: root:root
      permissions: "0640"
      content: |-
        apiVersion: helm.cattle.io/v1
        kind: HelmChart
        metadata:
          name: cilium
          namespace: kube-system
        spec:
          targetNamespace: kube-system
          version: ${CILIUM_VERSION:=1.15.0}
          chart: cilium
          repo: https://helm.cilium.io/
          bootstrap: true
          valuesContent: |-
            bgpControlPlane:
              enabled: true
            routingMode: native
            kubeProxyReplacement: true
            ipv4NativeRoutingCIDR: 10.0.0.0/8
            tunnelProtocol: ""
            enableIPv4Masquerade: true
            egressMasqueradeInterfaces: eth0
            policyAuditMode: ${FW_AUDIT_ONLY:=true}
            hostFirewall:
              enabled: true
            extraConfig:
              allow-localhost: policy
            k8sServiceHost: 10.0.0.2
            k8sServicePort: 6443
            extraArgs:
              - --direct-routing-device=eth1
              - --nodeport-addresses=0.0.0.0/0
            ipam:
              mode: kubernetes
            ipv4:
              enabled: true
            ipv6:
              enabled: false
            k8s:
              requireIPv4PodCIDR: true
            hubble:
              relay:
                enabled: true
              ui:
                enabled: true
    - contentFrom:
        secret:
          key:  linode-token-region.yaml
          name: linode-${CLUSTER_NAME}-crs-0
      owner: root:root
      path: /var/lib/rancher/rke2/server/manifests/linode-token-region.yaml
  registrationMethod: internal-only-ips
  serverConfig:
    cni: none
    cloudProviderName: external
    disableComponents:
      pluginComponents:
        - "rke2-ingress-nginx"
      kubernetesComponents:
        - "cloudController"
        - "kubeProxy"
  agentConfig:
    version: ${KUBERNETES_VERSION}
    nodeName: '{{ ds.meta_data.label }}'
    cisProfile: ${CIS_PROFILE:-"cis-1.23"}
    protectKernelDefaults: true
  preRKE2Commands:
    - |
      mkdir -p /etc/rancher/rke2/config.yaml.d/
      echo "node-ip: $(ip a s eth1 |grep 'inet ' |cut -d' ' -f6|cut -d/ -f1)" >> /etc/rancher/rke2/config.yaml.d/capi-config.yaml
    - sed -i '/swap/d' /etc/fstab
    - swapoff -a
    - hostnamectl set-hostname '{{ ds.meta_data.label }}' && hostname -F /etc/hostname
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
